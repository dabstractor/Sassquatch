@function addOpacity($color:black, $opacity: null){
    
    $thisRed: red($color);
    $thisGreen: green($color);
    $thisBlue: blue($color);

    @if ($opacity) {
        @return rgba($thisRed,$thisGreen,$thisBlue,$opacity)
    } @else {
       	@return rgba($thisRed,$thisGreen,$thisBlue,1)
    }
}

// _mixins.scss
@mixin respond-to-px($breakpoint, $boundary) {

    @if $boundary != null {

        @if ($boundary == "min") {
            @media (min-width: $breakpoint) {
                @content;
            }
        } @else {
            @media (max-width: $breakpoint) {
                @content;
            } 
        }

    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
    }
}

// _mixins.scss
@mixin respond-to($breakpoint, $boundary) {

    @if $boundary != null {

        @if ($boundary == "min") {
            @if map-has-key($breakpoints, $breakpoint) {
                @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
                    @content;
                }
            }
        } @else {
            @if map-has-key($breakpoints, $breakpoint) {
                @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
                    @content;
                }
            }
        }

    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
    }
}

@mixin custom-respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($custom-breakpoints, $breakpoint);
 
  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


@mixin respond-between($start, $end) {
  // Retrieves the value from the key
  $start: map-get($breakpoints, $start);
  $end: map-get($breakpoints, $end);
 
  // If the key exists in the map
  @if $start != null && $end != null {
    // Prints a media query based on the value
    @media (min-device-width: $start) and (max-device-width: $end) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


@mixin mySize(
    $width: auto, 
    $min-width: auto, 
    $max-width: auto, 
    $height: auto, 
    $min-height: auto, 
    $max-height: auto
){
    
    // Set Width	
    width: $width;
    min-width: $min-width;
    max-width: $max-width;
    
    // Set Height
    height: $height;
    min-height: $min-height;
    max-height: $max-height;

}

@mixin myPosition($pos,$op,$p1:auto,$p2:auto) {

	@if $pos == abs {
		position: absolute;
	} @else if $pos == rel {
		position: relative;
	} @else if $pos == fix {
		position: fixed;
	}

	@if $op == t-l {
		top: $p1;
		left: $p2;

	} @else if $op == t-r {
		top: $p1;
		right: $p2;

	} @else if $op == b-l {
		bottom: $p1;
		left: $p2;

	} @else if $op == b-r {
		bottom: $p1;
		right: $p2;
	}	
}


@mixin addCornerRadius($corner, $rad) {

	@if $corner == t-l {

             -moz-border-radius-topleft: $rad;
         -webkit-border-top-left-radius: $rad;
  			     border-top-left-radius: $rad;

	} @else if $corner == t-r {

		    -moz-border-radius-topright: $rad;
        -webkit-border-top-right-radius: $rad;
  			    border-top-right-radius: $rad;

	} @else if $corner == b-l {

	      -moz-border-radius-bottomleft: $rad;
	  -webkit-border-bottom-left-radius: $rad;
	          border-bottom-left-radius: $rad;

	} @else if $corner == b-r {

	     -moz-border-radius-bottomright: $rad;
	 -webkit-border-bottom-right-radius: $rad;
	         border-bottom-right-radius: $rad;

	} @else {
        -moz-border-radius-topleft:         $rad;
        -webkit-border-top-left-radius:     $rad;
        border-top-left-radius:             $rad;

        -moz-border-radius-topright:        $rad;
        -webkit-border-top-right-radius:    $rad;
        border-top-right-radius:            $rad;

        -moz-border-radius-bottomleft:      $rad;
        -webkit-border-bottom-left-radius:  $rad;
        border-bottom-left-radius:          $rad;

        -moz-border-radius-bottomright:     $rad;
        -webkit-border-bottom-right-radius: $rad;
        border-bottom-right-radius:         $rad;
    }

}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  } 
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin letterpress($color, $opacity){
    text-shadow:addOpacity($color, $opacity) 0 1px 0;
}

@mixin linear-gradient($start: #f1f1f1, $from: 0%, $stop: #d9d9d9, $to: 100%, $direction: to bottom) { 

    $webkit-start: left top;
    $webkit-end: left bottom;
    $webkit-linear: bottom;
    $moz-direction: center top;
    $o-direction: top;
    $ms-direction: top;

    @if ($direction == "to top") {
        $webkit-start: left bottom;
        $webkit-end: left top;
        $moz-direction: center bottom;
        $webkit-linear: bottom;
        $o-direction: top;
        $ms-direction: top;
    } @elseif ($direction == "to right") {
        $webkit-start: top left;
        $webkit-end: top right;
        $webkit-linear: left;
        $moz-direction: center left;
        $o-direction: right;
        $ms-direction: right;
    } @elseif ($direction == "to left") {
        $webkit-start: top right;
        $webkit-end: top left;
        $webkit-linear: right;
        $moz-direction: center right;
        $o-direction: left;
        $ms-direction: left;
    }


    @if (type-of $start != map) {
        // background: $start;
        background-color: $start;
        // background: -webkit-gradient(linear, left top, left bottom, from($start), to($stop));
        background: -webkit-gradient(linear, $webkit-start, $webkit-end, from($start), to($stop));
        // background: -moz-linear-gradient(center top, $start $from, $stop $to);
        background: -moz-linear-gradient($moz-direction, $start $from, $stop $to);
        // background: -moz-gradient(center top, $start $from, $stop $to);
        background: -moz-gradient($moz-direction, $start $from, $stop $to);
        // background: -webkit-linear-gradient(top, $start $from,$stop $to);
        background: -webkit-linear-gradient($webkit-linear, $start $from,$stop $to);
        // background: -o-linear-gradient(top, $start $from,$stop $to);
        background: -o-linear-gradient($o-direction, $start $from,$stop $to);
        // background: -ms-linear-gradient(top, $start $from,$stop $to);
        background: -ms-linear-gradient($ms-direction, $start $from,$stop $to);
        // background: linear-gradient(to bottom, $start $from,$stop $to);
        background: linear-gradient($direction, $start $from,$stop $to);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=0 );
    }
    // @else {
    //     @each $key, $value in $start {
            
    //     } 
    // }
}

@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


@mixin addTransition( $prop: all, $time: 200ms, $timing-fn: linear) { //adds hardware-accelerated transition
	transition: $prop $time $timing-fn;
	-webkit-transition: $prop $time $timing-fn;
	-moz-transition: $prop $time $timing-fn;
	-o-transition: $prop $time $timing-fn;
}

@mixin addCustomTransition( $values ) { //adds hardware-accelerated transition
	transition: $values;
	-webkit-transition: $values;
	-moz-transition: $values;
	-o-transition: $values;
}

@mixin addTextStroke( $color: #000,	$width: 1px, $fade: 0, $textShadow: "" ) { //uses 4 text-shadows instead of text-stroke for cross-browser compatibility
	text-shadow:
		$width*-1 $width*-1 $fade $color,
		$width $width*-1 $fade $color,
		$width*-1 $width $fade $color,
		$width $width $fade $color,
        #{$textShadow};
}

@mixin addTextShadow( $depth: 2px, $color: #ddd, $pos: b-r, $fade: $depth*2 ) {
	@if $pos == t-r {	
		text-shadow: $depth $depth*-1 $fade $color;
	} @else if $pos == t-l {	
		text-shadow: $depth*-1 $depth*-1 $fade $color;
	} @else	if $pos == b-l {
		text-shadow: $depth*-1 $depth $fade $color;
	} @else if $pos == b-r {	
		text-shadow: $depth $depth $fade $color;
	}
}

@mixin addFont( $name, $url ) {
	@font-face {
		font-family: $name;
		font-style: normal;
		font-weight: 400;
		src: url($url + ".ttf");
		src: url($url + ".otf") format('embedded-opentype'),
			url($url + ".woff") format('woff'),
			url($url + ".ttf") format('truetype'),
			url($url + ".svg#webfont") format('svg');
	}
}


@mixin buttonText() {
	
	&>span:first-child {
		display: block;
		float: left;
		font-size: 0.8rem;
		line-height: 23px;
		width: 73%;
		height: 100%;
		margin: auto;
		text-transform: uppercase;
		@include letterpress( white, 100%);
        font-family: formFont;
                
        &:active {
            @include letterpress( rgb(80,80,80), 100%);
        }
	}
}

@mixin centerMe($p, $w, $h) {
    position: $p;
    margin-top: -$h * 0.5;
    margin-right: 0;
    margin-bottom: 0;
    margin-left: -$w * 0.5;
    top: 50%;
    left: 50%;
}

@mixin showMyBox() {
    border: 1px solid black;
    background: white; 
}

@mixin vitaForm(){
    
    @at-root .vita-form {

        input{

                &[type="text"], &[type="password"], &[type="email"]{
                    background-color: #fff;
                    border: 1px solid #adadad;
                    border-radius: 3px;
                    height: 22px;

                    &:focus {
                        border-color: #505050;
                    }
                }

                &[type="radio"], &[type="checkbox"]{
                    display: none;
                }

                &[type="checkbox"] + label, &[type="radio"] + label {
                    color: rgb(80,80,80);

                }

                &[type="checkbox"] + label span {
                    display: inline-block;
                    background: url("../img/sprites/sprites_reg_2.svg") no-repeat -86px -118px;
                    width: 15px;
                    height: 14px;
                    cursor: pointer;
                    margin: 0 1px -2px 2px;
                }

                &[type="checkbox"]:checked + label span {
                    background: url("../img/sprites/sprites_reg_2.svg") no-repeat -86px -135px;
                }

                &[type="radio"] + label span {
                    display: inline-block;
                    background: url("../img/sprites/sprites_reg_2.svg") no-repeat -105px -118px; 
                    width: 15px; 
                    height: 15px;
                    cursor: pointer;
                    margin: 0px 2px -2px 1px;
                }

                &[type="radio"]:checked + label span {
                    background: url("../img/sprites/sprites_reg_2.svg") no-repeat -105px -134px;
                }

                &[type="textarea"]{

                }

        }

    @at-root .select-container{

            position: relative;

            #vita-select {
                background: none repeat scroll 0 0 rgb(244, 244, 244);
                border: 1px solid #ccc;
                border-radius: 4px;
                height: 34px;
                overflow: hidden;
                width: 240px;

                .dropdown-button{
                    background: #40afff; /* Old browsers */
                    background: -moz-linear-gradient(top,  #40afff 45%, #407dff 100%); /* FF3.6+ */
                    background: -webkit-gradient(linear, left top, left bottom, color-stop(45%,#40afff), color-stop(100%,#407dff)); /* Chrome,Safari4+ */
                    background: -webkit-linear-gradient(top,  #40afff 45%,#407dff 100%); /* Chrome10+,Safari5.1+ */
                    background: -o-linear-gradient(top,  #40afff 45%,#407dff 100%); /* Opera 11.10+ */
                    background: -ms-linear-gradient(top,  #40afff 45%,#407dff 100%); /* IE10+ */
                    background: linear-gradient(to bottom,  #40afff 45%,#407dff 100%); /* W3C */
                    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#40afff', endColorstr='#407dff',GradientType=0 ); /* IE6-9 */
                    border-bottom-right-radius: 3px;
                    border-left: 1px solid rgb(17, 181, 255);
                    border-top-right-radius: 3px;
                    float: right;
                    height: 100%;
                    position: relative;
                    right: 0;
                    top: 0;
                    width: 36px;

                    .arrow{
                        background: none repeat scroll 0 0 transparent;
                        border-left: 8px solid transparent;
                        border-right: 8px solid transparent;
                        border-top: 12px solid rgb(200,200,200);
                        height: auto;
                        margin: 0 auto;
                        position: absolute;
                        right: 11px;
                        top: 12px;
                        width: auto;
                        .inner-arrow {
                            background: none repeat scroll 0 0 transparent;
                            border-left: 6px solid transparent;
                            border-right: 6px solid transparent;
                            border-top: 9.9px solid rgb(244, 244, 244);
                            height: auto;
                            margin: 0 auto;
                            position: absolute;
                            right: -5.5px;
                            top: -11px;
                            width: auto;
                        } // End .inner-arrow
                    }// End arrow
                }// End .dropdown-button
            }// End #vita-select

            #vita-dropdown{
                background: none repeat scroll 0 0 #f4f4f4;
                border: 2px solid #40afff;
                border-radius: 4px;
                height: 160px;
                left: 8px;
                position: absolute;
                top: 55px;
                width: 227px;

                .dropdown-arrow {
                    background: none repeat scroll 0 0 transparent;
                    border-bottom: 19px solid rgb(64, 175, 255);
                    border-left: 11px solid transparent;
                    border-right: 11px solid transparent;
                    height: 0;
                    position: absolute;
                    right: 4px;
                    top: -20px;
                    width: 0;
                }

                .dropdown-list {
                    float: left;
                    height: 100%;
                    list-style: outside none none;
                    margin: 0;
                    overflow: hidden;
                    padding: 0;
                    position: absolute;
                    top: 0;
                    width: 100%; 

                    li {
                        position: relative;
                        width: 223px;
                        height: 30px;

                        &:hover {
                            background: rgb(230,230,230);
                            border-left: 5px solid rgb(64, 175, 255);
                        }
                        span {
                            font-family: montserrat;
                            height: 100%;
                            left: 5px;
                            position: absolute;
                            top: 4px;
                        } // End span
                    } // End li
                } // End .dropdown-list
            }// End #vita-dropdown
        }// End .dropdown-container

    } //End .vita-form
      
}

@mixin modernizer {
    @at-root {
        article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;}body{margin:0;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;margin:0.67em 0;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:bold;}dfn{font-style:italic;}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace,serif;font-size:1em;}pre{white-space:pre-wrap;}q{quotes:"\201C" "\201D" "\2018" "\2019";}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-0.5em;}sub{bottom:-0.25em;}img{border:0;}svg:not(:root){overflow:hidden;}figure{margin:0;}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em;}legend{border:0;padding:0;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,select{text-transform:none;}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer;}button[disabled],html input[disabled]{cursor:default;}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0;}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none;}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}
    }
}

@mixin reset {
    @at-root {

        html, body, div, span, applet, object, iframe,
        h1, h2, h3, h4, h5, h6, p, blockquote, pre,
        a, abbr, acronym, address, big, cite, code,
        del, dfn, em, img, ins, kbd, q, s, samp,
        small, strike, strong, sub, sup, tt, var,
        b, u, i, center,
        dl, dt, dd, ol, ul, li,
        fieldset, form, label, legend,
        table, caption, tbody, tfoot, thead, tr, th, td,
        article, aside, canvas, details, embed,
        figure, figcaption, footer, header, hgroup,
        menu, nav, output, ruby, section, summary,
        time, mark, audio, video {
            margin: 0;
            padding: 0;
            border: 0;
            font-size: 100%;
            font: inherit;
            vertical-align: baseline;
        }
        /* HTML5 display-role reset for older browsers */
        article, aside, details, figcaption, figure,
        footer, header, hgroup, menu, nav, section {
            display: block;
        }
        body {
            line-height: 1;
        }
        ol, ul {
            list-style: none;
        }
        blockquote, q {
            quotes: none;
        }
        blockquote:before, blockquote:after,
        q:before, q:after {
            content: '';
            content: none;
        }
        table {
            border-collapse: collapse;
            border-spacing: 0;
        }
    }
}


@mixin scaleAndCenter($scale: 1, $direction: both, $transform: "") {
    position: absolute;
    $transformDrawBackAmount: -50%;
    @if ($direction == horizontal) or ($direction == both) {
        @if ($direction == both) {
            top: 50%;
            $transformDrawBackAmount: -25%;
        }
        left: 50%;
        transform: scale($scale) translateX($transformDrawBackAmount) #{$transform};
    }
    @if ($direction == vertical){
        top: 50%;
        transform: scale($scale) translateY($transformDrawBackAmount) #{$transform};
    }
}
