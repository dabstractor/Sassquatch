@mixin useFormElements( $elementsUsed: all ) {
	// @warn(#{ & });
	// @warn($elementsUsed);
	@if ( $elementsUsed == all ) {
		$elementsUsed: radio checkbox radioContainer checkboxContainer text email password tel textarea dropdown-select select number output search searchContainer;
	}
	@if ( type-of $elementsUsed == list ) {
		@each $element in $elementsUsed {
		// @warn(form-#{ $element });
			@extend %form-#{ $element };// !optional;
		}
	}
}

@mixin form-base( $config ) {

            @include useFormElements( map-get( $config, elementsUsed ) );
            // Width
            @include form-width( map-get( $config, width ) );
            
            @include form-location( map-get( $config, location ) );

            @include form-size( map-get( $config, containerWidth ), map-get( $config, containerHeight ) );
			
			@include form-border( map-get( $config, border ) );

			
			@if( map-get( $config, shadow ) ) {
				// @if( map-get( $config, shadow ) == true ) {
				// 	$config: map-merge( $config, ( shadow: 5px 5px 5px rgba( 0, 0, 0, .3 ) ) );
				// }
				// box-shadow: map-get( $config, shadow ); 
				@extend %form-shadow;
			}

			@if( map-get( $config, rounded ) ) {
				@if( map-get( $config, rounded ) == true ) {
					$config: map-merge( $config, (rounded: 5px) );
				}
				@include addCornerRadius( all, map-get( $config, rounded ) );
			}
			
			@if( map-has-key( $config, styles ) ) {
				@include addStyles( map-get( $config, styles ) );
			}
}

@mixin form-border( $border ) {
	@if( $border ) {
		@extend %form-border; 
	}
}

@mixin form-size( $width, $height ) {
	@if( ($width == 100% and $height == 100% ) or ($width == null and height == null) ) {
		@extend %form-size;
	} @else {
		width: $width;
		height: $height;
	}
}

@mixin form-location( $position ) { 
// this can be specified as specific base styles in config
}


@mixin form-width( $width ){
}


/////////////
// Header
/////////////
@mixin form-header( $config ) {

	@extend %form-header-base;

	min-height: map-get( $config, height );

		// bg-color : define || default
		// text-color : define || default
		// height : define || auto
		// valign : define || left
		// halign : define || left
		// boxed? : 0 || 1 (default)
		// bot-border? : 0(default) || 1 
	
	@if map-has-key( $config, reset ) {
		@if(map-get($config,reset) == true) {
			@extend %form-reset;
		}
	}

	@if map-has-key( $config, bg-color ) {
		background-color: map-get( $config, bg-color );
	}	

	@if map-has-key( $config, text-color ) {
		color: map-get( $config, text-color );
	}	


	@if map-has-key( $config, valign ) {
		// make it align vertically here
		align-self: center;
		justify-content: center;
		//sequester this to placeholder
	}	

	@if map-has-key( $config, halign ) {
		//make it align horizontally here
	}	

	@if ( map-get( $config, boxed ) ) {
		border-bottom: 1px solid $color2;
	}

	@if map-get( $config, accent ) {
		$accent: map-get( $config, accent );
		@include form-accent( $accent );
	}

	@if( map-has-key( $config, styles ) ) {
		@include addStyles( map-get( $config, styles ) );
	}
} 

/////////////
// Content
/////////////
@mixin form-content( $config ) {
	// FORM-CONTENT: RUNNING;
	@extend %form-content-base;
	// @warn($config);
	@if(map-has-key($config,sections)) {
		// HERE: WE ARE;
		// background-color: red !important;
		$count: 1;
		@each $key, $sectionConfig in map-get($config,sections)  {

			&>section:nth-of-type(#{$count}) {
				
				@include form-section( $sectionConfig );
			}
			$count: $count + 1;
		}

		&::after {
			display:block;
			width: 100px;
			height: 100px;
			background-color: red;
			// content: #{&};
		}
	}
}

@mixin form-section( $config ) {
	// @warn(stringify($config));
	$divCount: 0;
	@if map-has-key( $config, width ) {
		@warn map-get($config,width);
		flex: 1 0 map-get($config,width);
	}
	@if map-has-key( $config, widgets ) {
		&>div {
			@each $key, $widget in map-get($config,widgets) {
				$divCount: $divCount + 1;
				&>div:nth-of-type(#{$divCount}) {
					widget: fuckery from the form mixin;
					@include useFormWidget(map-get($widget,name));
				}
				// @warn $key;
				// @warn $widget;
			}
		}
	}
}

/////////////
// Footer
/////////////
@mixin form-footer( $config ) {

	@extend %form-footer-base;
	@if map-get( $config, boxed ) {
		border-top: 1px solid $color2;
	}

	@include form-accent( map-get( $config, accent ) );

	@if( map-get( $config, useButton ) ) {
	
		$icon: "white-right-arrow";
		$activeIcon: "blue-right-arrow";
		@if( map-get( $config, buttonIcon ) ) {
			$icon: map-get( $config, buttonIcon );
		}
		@if( map-get( $config, buttonActiveIcon ) ) {
			$activeIcon: map-get( $config, buttonActiveIcon );
		}
		&>div.button>div {
			@include custom-button( $icon, $activeIcon );
		}	
	}

	min-height: map-get( $config, height );
} 

@mixin form-accent( $accent ) {
	@if( type-of( $accent ) != number ) {
		$accent: 1;
	}
	background-color: rgba( 0, 0, 0, $accent*0.03 );
}
