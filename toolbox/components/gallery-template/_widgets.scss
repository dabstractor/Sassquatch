@import "widgets/percentageCircle/percentageCircle";
@import "widgets/barGraph/barGraph";

$usedWidgets: null !default !global;

@mixin useWidget( $widgetName, $config: null ) { 
			// this technique is to prevent any possibility of output
			// from a widget
	$newName: $widgetName;
	$id: "";
	$configSelector: "";

	@if( $config != null ) {
		$id: str-replace(
			 str-replace(
			 	str-replace(
			 		str-replace(
			 			str-replace(
			 				str-replace(
				 				str-replace(
					 				str-replace(
				 					stringify( $config, "" ), "~", ""
					 				), ".", ""
				 				), ")", ""
			 				), "(", ""
			 			), ">",""
			 		), "!",""
			 	), "&", ""
			), " ", ""
		); // stringify the config, then replace the unfriendly characters
		$newName: $newName + $id;
		// $configSelector: $selector + $id;
		// $selector: $configSelector;
	}
	$selector: #{ getPrefix() }-widget-#{ $newName };
	// @if( $config != null and index( $usedWidgets, $newName ) == null ) {
	// 	$usedWidgets: append( $usedWidgets, $newName ) !global;
	// }


	@if( index( $usedWidgets, $newName ) == null ) {
		// newWidgetName: $newName;
		$usedWidgets: append( $usedWidgets, $newName ) !global; //wtf this is ridiculous

		@at-root %#{ $selector } {

			@if( $config and map-has-key( $config, addStyles ) ) {
				@include addStyles( map-get( $config, addStyles ) );
				// @at-root %#{ $configSelector } {
				// }
			}

			@if ( $widgetName == exWidget ) {
				color: blue;
			}

			// @elseif ( $widgetName == exWidget2 ) {
			// 	color: purple;
			// 	background-color: lightblue;
			// }

			// @elseif ( $widgetName == exWidget4 ) {
			// 	color: green;
			// }


			@if ( $widgetName == favorites ) {
							// main container
				width: 100%;
				height: 100%;
				background-color: $color4;
				cursor: pointer;
				display: flex;

				&>div { 
					&:first-of-type { // text
						position: relative;
						bottom: 30px;
						font-size: 26px;
						line-height: 25px;
						color: $color3;
						transition: transform 300ms ease;
					}

					&:last-of-type { //semi-circle
						position: absolute;
						bottom: -34%;
						left: 40px;
						width: 120px;
						height: 107px;
						border-radius: 50%;
						background-color: $color7;
						transition: background-color 400ms linear;
					}
				}

				&.selected {
					&>div {
						&:first-of-type { // text
						}
						&:last-of-type { // semi-circle
							background-color: $color6;
						}
					}

					&:hover { 
						&>div {
							&:last-of-type { // semi-circle
								background-color: lighten($color6, 10%);
							}
						}
					}

					&:active { 
						&>div {
							&:last-of-type { // semi-circle
								background-color: lighten($color6, 30%);
							}
						}
					}
				}

				&:hover {
					&>div {
						&:first-of-type {
							color: white;
							transform: scale(1.03);
							text-shadow: 1px 1px 1px black;
						}
						&:last-of-type {
							background-color: $color5;
						}
					}
				}

				&:active {
					&>div {
						&:first-of-type {
							color: white;
							transform: scale(1);
							transition: none;
						}
						&:last-of-type {
							background-color: lighten($color5, 10%);
							transition: none;
						}
					}
				}
			}

			@if ( $widgetName == dashboard-info ) {
				&>div {
					&:nth-of-type(1) {
						width: 100%;
						display: inline-block;

						// &:hover {
						// 	input+div {
						// 		@include icon( "search-active", 0.8 );
						// 	}
						// }
					}

					&:nth-of-type(2) {
						margin-top: 15px;
						// background-color: red;
						width: 100%;
						height: 100%;

						&>div {
							margin: 0;
							text-align: left;

							&>span {
								&:nth-of-type(1) {
									width: 50px;
									font-size: 16px;
									text-align: right;
									margin: 0 5px 0 35px;
									color: $color5;
								}
								&:nth-of-type(2) {
									position: relative;
									bottom: 1px;
									color: $color4;
									font-size: 14px;
									line-height: 16px;
									padding-bottom: 2px;
								}
							}
						}
					}
				}
			}

			@elseif ( $widgetName == add-button ) {

				@extend %no-select;

				position: relative;
				display: flex;
				flex-flow: row nowrap;
				align-items: center;
				justify-content: space-between;
				height: 100%;
				cursor: pointer;

				&:hover {
					&>div {
						&:nth-of-type(1) {
							transition: all 400ms ease;
						}	
						&:nth-of-type(2) {
							color: $color5;
						}
						&:nth-of-type(3) {
							// @include icon("plus-button-active",3);
							@include icon("plus-button",3.5);
							transition: all 400ms ease;
						}
					}
				}


				&:active {
					// background-color: $color4;
					// background-color: #ddd;
					// border: 2px solid lighten($color4, 20%);

					&>div {
						&:nth-of-type(1) {
							@include icon("documents",.95);
							transition: none;
						}	
						// &:nth-of-type(1) {
						// 	&>div {
						// 		@include icon("documents-active",9);
						// 	}
						// }
					}
				}

				&>div {
					&:nth-of-type(1) {
						position: relative;
						left: 20%;

						&>div {
							align-self: center;
							@include icon("documents",10);
						}
					}
					&:nth-of-type(2) {

						position: relative;
						// top: 10%;
						max-width: 55%;
						// align-self: flex-end;
						color: $color5;
						text-align: left;
						font-size: 30px;
						line-height: 30px;
						// margin-right: 10px;
					}

					&:nth-of-type(3) {

						// background-color: orange;
						position: absolute;
						top: 29px;
						right: 29px;
						@include icon("plus-button",3);
						transition: all 400ms ease;
					}
				}
			}

			@elseif ( $widgetName == list ) {
				display: flex;
				@include vita-list( $config );
			}



			@elseif ( $widgetName == data-columns ) {

				display: flex;
				flex-flow: column nowrap;
				height: 100%;
				width: 100%;
				flex: 1 1 auto;
				justify-content: flex-start;
				// padding: 10px;

				&>div {
					display: flex;
					flex-flow: row nowrap;
					// flex: 1 0 auto;
					// justify-content: flex-start;
					width: 100%;
					// height: 100%;
					// align-items: flex-start;
					// flex: 1 0 auto;
					// margin: 20px 0;
					margin: 0;
					padding: 0;

					&:nth-of-type( 2n ) {
						background-color: rgba(100, 100, 100, .1);
					}

					&>span {
						width: 50%;
						min-height: 30px;
						text-align: left;
						line-height: 13px;
						font-size: 14px;
						letter-spacing: -1px;
						padding: 0 5px;
						// align-self: stretch;
						align-items: center;
						display: flex;
						flex-flow: row wrap;
						padding: 0 5px;

						&:nth-of-type( 2 ) {
							border-left: 2px solid $color1;
						}

						&>ul {
							display: block;
							width: 100%;
							padding-left: 10px;
						}
					}
				}

			}

			@elseif ( $widgetName == percentageCircle ) {
				.percentageCircle {
					@include percentageCircle;
				}
			}

			@elseif ( $widgetName == barGraph ) { //widgetBody
				@include barGraph;
			}

			@elseif( $widgetName == footerBar ) {
				footerBar: widget;
				display: block;
				width: 100%;
				position: relative;
				// min-height: 35%;
				min-height: 60px;
				@if( $config ) {
					asdf: stringify( $config );
				}

				&>div:nth-of-type(1) {
					margin-top: -12px;
					display: block;
					background-color: inherit;
					@extend %strike-through-heading;
					&:before {
						max-width: 90%;
					}
				}
				&>div:nth-of-type(2) {
					font-size: 1.5rem;
					height: 40px;
					display: flex;
					justify-content: center;
					align-items: center;
					// background-color: blue !important;

					@if( true ) {
					}

					// @warn( stringify( $config, "!,  " ) );
					
					@if( $config ) {
						// background-color: red !important;
						// @warn( "??????????????????????????????????asdfkljasf?????????????????????????????????" );
						// asdf: stringify( $config );
						//handle footer config here
						// $footerConfig: map-get( $config, footerConfig );
						// @each $footerConfig in $config {
							// @warn( type-of( $footerConfig ) );
							// @warn( stringify($footerConfig) );
						// @warn( type-of( $config ) );
						// @warn( $config );
						@each $footerKey, $footerConfig in $config {
							// @warn( ppm_debug( $footerConfig ) );
							// @warn( type-of( $footerConfig ) );

							@if( map-has-key( $footerConfig, name ) ) {
								// @warn( "found footer config !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" );
								// & {
									// asdf: asdf asdf;
									// scope: #{ & };
									@include useWidget( map-get( $footerConfig, name ), map-get( $footerConfig, config) );
								// }
							}
						}
					}
				}
			}

			@elseif( $widgetName == side-by-side-with-footer ) {
				// @at-root .#{ $configSelector } {
				// 	&>div:nth-of-type( 2 ) {

				// 	}
				// }
				@include useWidget( side-by-side, $config );

				&>div {
					&:nth-of-type(1) {
						max-height: 75%;
					}
					&:nth-of-type(2) {
						max-height: 60%;
						$footerConfig:();
						@if( map-has-key($config, footerConfig ) ) {
							$footerConfig: map-get($config, footerConfig);
							// fdsa: stringify($footerConfig);
							@include useWidget( map-get( $config, footer ), map-get( $config, footerConfig ) );
							// @if( map-has-key($footerConfig, name ) )  {
							// }
						}
					}
				}
			}

			@elseif ( $widgetName == side-by-side ) {
				position: relative;
				&>div {
					display: flex;
					flex-flow: row nowrap;
					width: 100%;
					justify-content: center;
					align-items: center;
					max-height: 100%;
					height: 100%;
					background-color: inherit;
					position: relative;

					&>div {
						display: flex;
						flex-flow: column nowrap;
						align-items: center;
						flex: 1 0 50%;
						justify-content: center;
						background-color: inherit;
						position: relative;
							
						&>div {
							margin: 0 auto;
							&:nth-of-type( 2 ) {
								justify-content: flex-end;
								bottom: 1px;
								align-self: flex-end;
								position: relative;
								width: 100%;
								z-index: 11;
								margin-bottom: 0px;
								font-size: 15px;
							}
						}
						max-height: 75%;
						height: 100%;


						&:nth-of-type( 1 ) {
								@include useWidget( map-get( $config, left ) );
						}
						&:nth-of-type( 2 ) {
								@include useWidget( map-get( $config, right ) );
							max-height: 70%;
							height: 100%;
							border-left: 2px solid $color1;
						}
					}
				}
				
				@if( $config != null ) {

					// @at-root .#{ $configSelector } {
					// 	&>div>div {
					// 		&:nth-of-type( 1 ) {
					// 		}
					// 		&:nth-of-type( 2 ) {

					// 		}
					// 	}

					// }

				}
			}
			@elseif( $widgetName == controlButtons ) {
				//controlButtonWidget gets built here
				display: flex;


				$icon: null;
				$activeIcon: null;

				@if( map-get( $config, buttonIcon ) ) {
					// $buttonIcon: map-get( $config, buttonIcon );
					// @if( type-of $buttonIcon == list) {
					// 	@each $button in $buttonIcon {
					// 		@warn( $button );

					// 	}
					// }

					$icon: map-get( $config, buttonIcon );
					// @if( map-get( $config, activeButtonIcon ) == null ) {
					// 	$activeIcon:
					// }
				}
				@if( map-get( $config, buttonActiveIcon ) ) {
					// ABI:  map-get( $config, activeButtonIcon );
					$activeIcon:  map-get( $config, buttonActiveIcon );
				} @else {
					$activeIcon: $icon;
				}

				@if( type-of map-get( $config, buttonIcon ) == list and length( $map-get( $config, buttonIcon ) ) > 1 ) {
					$count: 1;
					@each $buttonIcon in map-get( $config, buttonIcon ) {
						&>div:nth-of-type(#{$count}) {
							@include custom-button( nth( $icon, $count ), nth( $activeIcon, $count ) );
							margin: 5px auto;
						}
						$count: $count + 1;
					}
				}
				@else {
					&>div {
						@include custom-button( $icon, $activeIcon );
						margin: 5px auto;
					}
				}
			}
			@elseif( $widgetName == checkOrX ) {
				@include useWidget( data-columns );
				&>div {
					&>span {
						&:nth-of-type( 1 ) {
							width: 90%;
						}
						&:nth-of-type( 2 ) {
							width: 35px;
							display: flex;
							justify-content: center;
							align-items: center;
							&>div {
								@include icon( "xmark", 1.3 );
							}
						}
					}
					&.primary {
						&>span {
							&:nth-of-type( 1 ) {
								&::after {
									content: "Primary";
									position: absolute;
									right: 40px;
									top: 8px;
									font-size: 10px;
									letter-spacing: 0px;
									@extend .green-text;
								}

							}
							&:nth-of-type( 2 ) {
								&>div {
									@include icon( "checkmark", 1.3 );
									
								}
							}
						}
					}
				}
			}
			@elseif( $widgetName == fullSizeIMG ) {
				margin-top: 6px;
				&>img {
					width: 100%;
					height: 100%;
				}
			}
			@elseif ( $widgetName == xlFont ) {
				font-size: 3rem !important;
				line-height: 3rem !important;
				height: 50%;
				align-items: center;
				justify-content: center;
			}
			@elseif( $widgetName == description ) {
				& div {
					margin: 2px auto;
					font-size: 1rem;
					line-height: 1rem;
				}
			}
			@elseif( $widgetName == descriptionWFooter ) {
				@include useWidget( description );

				&>div:last-child {
					position: absolute;
					font-size: inherit;
					margin: 0;
					left: 0;
				}
			}
			@else {
				@warn ( "Widget " + $widgetName + " does not exist" );
			}
			// @if( $config != null ) {
			// 	@extend .#{ $configSelector } !optional;
			// }
		}
	}
	@extend %#{ $selector };
}
